from flask import request
from flask_restful import Resource
import json
from utils.date_converter import get_date
from database_manager import inventory_collection, shipment_collection
from bson import json_util
from bson.objectid import ObjectId
import jsonschema
from model.exceptions.data_format import DataFormatError
from model.shipment_schema_val import ShipmentSchemaValidator

shipment_schema_validator = ShipmentSchemaValidator()

class ShipmentCollection(Resource):
    def get(self):
        """
            Handles the GET request.
            Returns all Shipment documents.
        """
        try:
            result = shipment_collection.find({})
            return json.loads(json_util.dumps(result)), 200
        except Exception as e:
            return {"reason": str(e)}, 500

    def post(self):
        """
            Handles the POST request.
            Creates a new Shipment document with an autogenerated id.
            Required fields in request data are given in ShipmentSchemaValidator.
        """
        try:
            data = request.get_json()
            shipment_schema_validator.validate_post(data)
            
            # parse inventory_ids in the data to ensure that the units requested in the shipment is available
            inventories_to_units = {}
            for inventory in data["inventory_items"]:
                if inventory["inventory_id"] not in inventories_to_units:
                    inventories_to_units[inventory["inventory_id"]] = inventory["units"]
                else:
                    inventories_to_units[inventory["inventory_id"]] += inventory["units"]
            # retrieve all inventory documents with the specified ids
            for inventory_id in inventories_to_units:
                inventory_doc = inventory_collection.find_one({"_id": ObjectId(inventory_id)})

                if inventory_doc is None:
                    return {"response": f'Inventory with _id {inventory_id} does not exist'}, 400

                # check units_remaining
                if inventory_doc["units_remaining"] < inventories_to_units[inventory_id]:
                    return {"response": f'Inventory with _id {inventory_id} does not have the desired amount of units'}, 409
            
            # update the inventory documents - decrement units_remaining
            for inventory_id in inventories_to_units:
                inventory_collection.find_one_and_update(
                    {"_id": ObjectId(inventory_id)},
                    {"$inc": {"units_remaining": -inventories_to_units[inventory_id]}}
                )

            # ensure that inventory_id is not repeated in request data
            data["inventory_items"] = []
            for inventory_id in inventories_to_units:
                data["inventory_items"].append({"inventory_id": inventory_id, "units": inventories_to_units[inventory_id]})

            # finally, create a new shipment document
            data["date_created"] = get_date(data["date_created"])
            shipment_id = shipment_collection.insert_one(data).inserted_id
            return {"uri": str(shipment_id)}, 200
        except (jsonschema.exceptions.ValidationError, DataFormatError) as e:
            return {"reason": str(e)}, 400
        except Exception as e:
            return {"reason": str(e)}, 500